crud  cores
CONTROLLER ListColors
Models 
AdmsAddColors
AdmsDeleteColors
AdmsEditColors
AdmsListColors


Views
-addColors
-editColors
-listColors
-viewColors
-deletColors

roteiro
criar controler - adicionar nas páginas privadas- 
criar view
mudar titulo para Listar Cores, criar o link da pagina cadastrar,
ir para controller  usar expressão regular, se receber a página por parametro usa, senão atribui : 1
- instanciar na controller a models AdmsListColors
- criar a models  AdmsListColors, cria o método listColors que vai  receber a pagina por parametor e instanciar as helpers de consulta no banco de dados,
na controller instancia o metodo listColors e passa a  $this->page por parametto.
essa parte altera pouca coisa a paginação esta criada ja 

instancia a helper pagination e passa o link por parametro,
instancia o método págination e passa a query  que vai ser recebida no helper AdmsPaginatiom no metodo pagination e nesse metodo instancia a helper de leitura e passa a query
ainda na Models AdmsPagination
o retorno da query atribui ao this->resultBd e instancia o $this->pageInstruction();
esse método divide  o numero de registros retornados pelo numero de registros que dev eter por página   $this->totalPages = (int) ceil($this->resultBd[0]['num_result'] / $this->limitResult);
verifica se o usuario não estiver acessando uma página maior ele intancia a  $this->layoutPagination(); que por sua vez exibe a paginação.
volta para a CONTROLLER e instancia no objeto o getResult (na models esse atributo retorna o result e o result retorna true ou false) e verifica se for true adiciona essas posições ao this-> data   
  $this->data['listColors'] = $listColors->getResultBd();
$this->data['pagination']=  $listColors->getResultPg();

é enviado esse dados para view EFETUA O FORECH 
foreach ($this->data['listColors'] as $colors) {
     extract($colors);
    echo "ID: $id <br>";
    echo "Nome: $name <br>";
    echo "Cor: <span style='color: $color'>$color</span> <br>";
    echo "<a href='" . URLADM . "view-colors/index/$id'>Visualizar</a><br>";
    echo "<a href='" . URLADM . "edit-colors/index/$id'>Editar</a><br>";
    echo "<a href='" . URLADM . "delete-colors/index/$id'>Apagar</a><br>";
    echo "<hr>";
 }
echo $this->data['pagination'];

LISTAR IMPLANTADO


IMPLANTAR ADICIONAR
cria a controller addColors
coloca a view nas paginas restritas
Cria a view
NA view edita h1  e o link para listas cores
cria o formuilário sem o foreach pois não vai ser selecionado e sim inserido as informações

VAI PARA A CONTROLLER
no método index verifica se o usuário clicou no botão do formulário e destroi a posição
se clicou intancia a models e passa os dados para o método create por parametro
 $createSitUser= new \App\adms\Models\AdmsAddColors();
            $createSitUser->create($this->dataForm);

cria a models e no método create  instancia a helper para validar os campos vazios
$valEmptyField = new \App\adms\Models\helper\AdmsValEmptyField();       
        $valEmptyField->valField($this->data);
 se nao tiver erro instancia o metodo add()
 atribui uma posição 'created' para o this->data  com horario 
 instancia a helper AdmsCreate e envia o nome da tavela e os dados.

retorna true ou false no $this->result

e o metodo getResult retorna o que tiver em $this->result para a controller.


IMPLANTAR EDITAR

cria controller - no metodo index recebe id por parametro e dentro do método index recebe pela url os dados e armazena na dataForm
-verifica se recebeu id e foi clicado n o formulario instancia a helper. se foi
-na models instancia a classe  e o metodo viewColor  o metodo recebe ID por parametro e intacia a helper de leitura para retornar a cor referente ao id
-retorna true ou false se encontrou,se nao instancia o editColor
Na Controller se retornou resultado atribui a uma posição form e e instancia o metodo viewEditColor para carregar a view w mandas os dados a senao redireciona 

cria a view

